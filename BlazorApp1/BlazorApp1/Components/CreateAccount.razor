@page "/create-account"
@using BlazorApp1.Models
@inject BlazorApp1.Services.AccountService AccountService

<h3>Create Account</h3>


<EditForm Model="@newAccount" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText @bind-Value="@newAccount.FirstName" id="firstName" class="form-control" />
        <ValidationMessage For="@(() => newAccount.FirstName)" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText @bind-Value="@newAccount.LastName" id="lastName" class="form-control" />
        <ValidationMessage For="@(() => newAccount.LastName)" />
    </div>

    <div class="form-group">
        <label for="middleName">Middle Name:</label>
        <InputText @bind-Value="@newAccount.MiddleName" id="middleName" class="form-control" />
        <ValidationMessage For="@(() => newAccount.MiddleName)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText @bind-Value="@newAccount.Email" id="email" class="form-control" />
        <ValidationMessage For="@(() => newAccount.Email)" />
    </div>

    <div class="form-group">
        <label for="birthDate">Birth Date:</label>
        <InputDate @bind-Value="@newAccount.BirthDate" id="birthDate" class="form-control" />
        <ValidationMessage For="@(() => newAccount.BirthDate)" />
    </div>

    <div class="form-group">
        <label for="cityId">City:</label>
        <InputSelect @bind-Value="@newAccount.CityId" id="cityId" class="form-control">
            @foreach (var city in Cities)
            {
                <option value="@city.Id">@city.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newAccount.CityId)" />
    </div>

    <button type="submit" class="btn btn-primary">Create Account</button>
</EditForm>

@code {
    private BlazorApp1.Models.Account newAccount = new BlazorApp1.Models.Account();
    private List<City> Cities = new List<City>(); // Assuming you have a list of cities to populate the dropdown

    protected override async Task OnInitializedAsync()
    {
        // Example of fetching cities from a service or repository
        Cities = await AccountService.GetCitiesAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await AccountService.CreateAccountAsync(newAccount);
            // Optionally, you can navigate to another page or show a success message
        }
        catch (Exception ex)
        {
            // Handle any exceptions that might occur during account creation
            Console.WriteLine($"Error creating account: {ex.Message}");
        }
    }
}

